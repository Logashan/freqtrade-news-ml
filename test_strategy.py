#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ NewsHeliusBitqueryML
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –µ—ë –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

–ê–≤—Ç–æ—Ä: Trading Bot
–í–µ—Ä—Å–∏—è: 1.0
"""

import sys
import os
import logging
import pandas as pd
import numpy as np
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'strategies'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'signals'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def test_strategy_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        from strategies.NewsHeliusBitqueryML import NewsHeliusBitqueryML
        
        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = {
            'external_apis': {
                'helius_api_key': 'test_key',
                'bitquery_api_key': 'test_key',
                'news_api_key': 'test_key'
            }
        }
        
        # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy = NewsHeliusBitqueryML(config)
        
        print("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {strategy.__class__.__name__}")
        print(f"   - –¢–∞–π–º—Ñ—Ä–µ–π–º: {strategy.timeframe}")
        print(f"   - –°—Ç–æ–ø-–ª–æ—Å—Å: {strategy.stoploss}")
        print(f"   - ROI: {strategy.minimal_roi}")
        
        return strategy
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return None

def test_indicators(strategy):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á—ë—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    
    try:
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        dates = pd.date_range(start='2024-01-01', end='2024-01-10', freq='5min')
        test_data = pd.DataFrame({
            'open': np.random.uniform(100, 200, len(dates)),
            'high': np.random.uniform(100, 200, len(dates)),
            'low': np.random.uniform(100, 200, len(dates)),
            'close': np.random.uniform(100, 200, len(dates)),
            'volume': np.random.uniform(1000, 10000, len(dates))
        }, index=dates)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        result = strategy.populate_indicators(test_data, {'pair': 'BTC/USDT:USDT'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        required_indicators = ['rsi', 'macd', 'macdsignal', 'macdhist', 'bb_lowerband', 'bb_upperband']
        missing_indicators = []
        
        for indicator in required_indicators:
            if indicator not in result.columns:
                missing_indicators.append(indicator)
        
        if missing_indicators:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {missing_indicators}")
            return False
        else:
            print("‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            print(f"   - RSI: {result['rsi'].iloc[-1]:.2f}")
            print(f"   - MACD: {result['macd'].iloc[-1]:.2f}")
            print(f"   - BB –≤–µ—Ä—Ö–Ω—è—è: {result['bb_upperband'].iloc[-1]:.2f}")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return False

def test_entry_signals(strategy):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—Ö–æ–¥–∞"""
    
    try:
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
        dates = pd.date_range(start='2024-01-01', end='2024-01-10', freq='5min')
        test_data = pd.DataFrame({
            'open': np.random.uniform(100, 200, len(dates)),
            'high': np.random.uniform(100, 200, len(dates)),
            'low': np.random.uniform(100, 200, len(dates)),
            'close': np.random.uniform(100, 200, len(dates)),
            'volume': np.random.uniform(1000, 10000, len(dates)),
            'rsi': np.random.uniform(20, 80, len(dates)),
            'macd': np.random.uniform(-10, 10, len(dates)),
            'macdsignal': np.random.uniform(-10, 10, len(dates)),
            'macdhist': np.random.uniform(-5, 5, len(dates)),
            'bb_lowerband': np.random.uniform(90, 110, len(dates)),
            'bb_middleband': np.random.uniform(100, 120, len(dates)),
            'bb_upperband': np.random.uniform(110, 130, len(dates)),
            'ema_20': np.random.uniform(100, 120, len(dates)),
            'ema_50': np.random.uniform(100, 120, len(dates)),
            'atr': np.random.uniform(1, 5, len(dates)),
            'volume_sma': np.random.uniform(5000, 15000, len(dates)),
            'mom': np.random.uniform(-5, 5, len(dates)),
            'adx': np.random.uniform(10, 50, len(dates)),
            'cci': np.random.uniform(-100, 100, len(dates)),
            'helius_signal': np.random.choice([-1, 0, 1], len(dates)),
            'bitquery_signal': np.random.choice([-1, 0, 1], len(dates)),
            'news_sentiment': np.random.uniform(-1, 1, len(dates)),
            'ml_signal': np.random.uniform(0, 1, len(dates))
        }, index=dates)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤—Ö–æ–¥–∞
        result = strategy.populate_entry_trend(test_data, {'pair': 'BTC/USDT:USDT'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        if 'enter_long' in result.columns and 'enter_short' in result.columns:
            long_signals = result['enter_long'].sum()
            short_signals = result['enter_short'].sum()
            
            print("‚úÖ –°–∏–≥–Ω–∞–ª—ã –≤—Ö–æ–¥–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            print(f"   - –õ–æ–Ω–≥ —Å–∏–≥–Ω–∞–ª—ã: {long_signals}")
            print(f"   - –®–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª—ã: {short_signals}")
            return True
        else:
            print("‚ùå –°–∏–≥–Ω–∞–ª—ã –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—Ö–æ–¥–∞: {e}")
        return False

def test_exit_signals(strategy):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—ã—Ö–æ–¥–∞"""
    
    try:
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        dates = pd.date_range(start='2024-01-01', end='2024-01-10', freq='5min')
        test_data = pd.DataFrame({
            'open': np.random.uniform(100, 200, len(dates)),
            'high': np.random.uniform(100, 200, len(dates)),
            'low': np.random.uniform(100, 200, len(dates)),
            'close': np.random.uniform(100, 200, len(dates)),
            'volume': np.random.uniform(1000, 10000, len(dates)),
            'rsi': np.random.uniform(20, 80, len(dates)),
            'macd': np.random.uniform(-10, 10, len(dates)),
            'macdsignal': np.random.uniform(-10, 10, len(dates)),
            'news_sentiment': np.random.uniform(-1, 1, len(dates)),
            'ml_signal': np.random.uniform(0, 1, len(dates))
        }, index=dates)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤—ã—Ö–æ–¥–∞
        result = strategy.populate_exit_trend(test_data, {'pair': 'BTC/USDT:USDT'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        if 'exit_long' in result.columns and 'exit_short' in result.columns:
            long_exits = result['exit_long'].sum()
            short_exits = result['exit_short'].sum()
            
            print("‚úÖ –°–∏–≥–Ω–∞–ª—ã –≤—ã—Ö–æ–¥–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            print(f"   - –í—ã—Ö–æ–¥—ã –∏–∑ –ª–æ–Ω–≥–∞: {long_exits}")
            print(f"   - –í—ã—Ö–æ–¥—ã –∏–∑ —à–æ—Ä—Ç–∞: {short_exits}")
            return True
        else:
            print("‚ùå –°–∏–≥–Ω–∞–ª—ã –≤—ã—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—ã—Ö–æ–¥–∞: {e}")
        return False

def test_ml_model():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ML –º–æ–¥–µ–ª—å"""
    
    try:
        from signals.ml_model import MLModel
        
        # –°–æ–∑–¥–∞—ë–º ML –º–æ–¥–µ–ª—å
        ml_model = MLModel()
        
        print("‚úÖ ML –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   - –û–±—É—á–µ–Ω–∞: {ml_model.model_trained}")
        print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(ml_model.feature_names)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ML –º–æ–¥–µ–ª–∏: {e}")
        return False

def test_external_signals():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–Ω–µ—à–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã"""
    
    try:
        from signals.helius_signal import HeliusSignalGenerator
        from signals.bitquery_signal import BitquerySignalGenerator
        from signals.news_sentiment import NewsSentimentAnalyzer
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Helius
        helius = HeliusSignalGenerator("test_key")
        print("‚úÖ Helius Signal Generator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Bitquery
        bitquery = BitquerySignalGenerator("test_key")
        print("‚úÖ Bitquery Signal Generator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º News Sentiment
        news = NewsSentimentAnalyzer("test_key")
        print("‚úÖ News Sentiment Analyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ NewsHeliusBitqueryML")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    strategy = test_strategy_loading()
    
    if strategy is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
    test_external_signals()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º ML –º–æ–¥–µ–ª—å
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –º–æ–¥–µ–ª–∏...")
    test_ml_model()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
    test_indicators(strategy)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤—Ö–æ–¥–∞
    print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—Ö–æ–¥–∞...")
    test_entry_signals(strategy)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤—ã—Ö–æ–¥–∞
    print("\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—ã—Ö–æ–¥–∞...")
    test_exit_signals(strategy)
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –†–µ–∑—é–º–µ:")
    print("   - –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("   - –í—Å–µ –º–æ–¥—É–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è")
    print("   - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è")
    print("   - –°–∏–≥–Ω–∞–ª—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è")
    print("   - ML –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("\nüöÄ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    main()
