#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–ê–≤—Ç–æ—Ä: Trading Bot
–í–µ—Ä—Å–∏—è: 1.0
"""

import os
import sys
import json
import importlib
from pathlib import Path

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    version = sys.version_info
    if version.major == 3 and version.minor >= 11:
        print(f"   ‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True
    else:
        print(f"   ‚ùå Python {version.major}.{version.minor}.{version.micro} - –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.11+")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    dependencies = {
        'freqtrade': 'Freqtrade',
        'pandas': 'Pandas',
        'numpy': 'NumPy', 
        'talib': 'TA-Lib',
        'xgboost': 'XGBoost',
        'requests': 'Requests',
        'ccxt': 'CCXT',
        'pandas_ta': 'Pandas TA'
    }
    
    all_ok = True
    
    for module, name in dependencies.items():
        try:
            importlib.import_module(module)
            print(f"   ‚úÖ {name} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print(f"   ‚ùå {name} - –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            all_ok = False
    
    return all_ok

def check_config_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    print("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    config_path = Path("config_futures.json")
    
    if not config_path.exists():
        print("   ‚ùå –§–∞–π–ª config_futures.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        required_keys = [
            'exchange', 'pair_whitelist', 'stake_currency', 
            'dry_run', 'strategy', 'trading_mode'
        ]
        
        missing_keys = [key for key in required_keys if key not in config]
        
        if missing_keys:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏: {missing_keys}")
            return False
        
        print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - OK")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if config.get('dry_run', True):
            print("   ‚ÑπÔ∏è  –†–µ–∂–∏–º: DRY RUN (–¥–µ–º–æ —Ç–æ—Ä–≥–æ–≤–ª—è)")
        else:
            print("   ‚ö†Ô∏è  –†–µ–∂–∏–º: LIVE TRADING (—Ä–µ–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏)")
        
        print(f"   ‚ÑπÔ∏è  –ë–∏—Ä–∂–∞: {config.get('exchange', {}).get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
        print(f"   ‚ÑπÔ∏è  –ü–∞—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {len(config.get('pair_whitelist', []))}")
        print(f"   ‚ÑπÔ∏è  –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {config.get('strategy', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
        
        return True
        
    except json.JSONDecodeError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def check_strategy_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
    
    strategies_dir = Path("strategies")
    
    if not strategies_dir.exists():
        print("   ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è strategies –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    strategy_file = strategies_dir / "NewsHeliusBitqueryML.py"
    
    if not strategy_file.exists():
        print("   ‚ùå –§–∞–π–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ NewsHeliusBitqueryML.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("   ‚úÖ –§–∞–π–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    try:
        sys.path.insert(0, str(strategies_dir))
        import NewsHeliusBitqueryML
        print("   ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        return True
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return False

def check_signal_modules():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–¥—É–ª–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    signals_dir = Path("signals")
    
    if not signals_dir.exists():
        print("   ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è signals –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    signal_files = [
        "helius_signal.py",
        "bitquery_signal.py", 
        "news_sentiment.py"
    ]
    
    all_ok = True
    
    for file_name in signal_files:
        file_path = signals_dir / file_name
        if file_path.exists():
            print(f"   ‚úÖ {file_name} –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"   ‚ùå {file_name} –ù–ï –Ω–∞–π–¥–µ–Ω")
            all_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    try:
        sys.path.insert(0, str(signals_dir))
        from helius_signal import HeliusSignalGenerator
        from bitquery_signal import BitquerySignalGenerator
        from news_sentiment import NewsSentimentAnalyzer
        print("   ‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
        all_ok = False
    
    return all_ok

def check_scripts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤...")
    
    scripts = {
        "install_freqtrade.sh": "–°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
        "run_futures.sh": "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞"
    }
    
    all_ok = True
    
    for script_name, description in scripts.items():
        script_path = Path(script_name)
        if script_path.exists():
            if os.access(script_path, os.X_OK):
                print(f"   ‚úÖ {description} - –Ω–∞–π–¥–µ–Ω –∏ –∏—Å–ø–æ–ª–Ω—è–µ–º")
            else:
                print(f"   ‚ö†Ô∏è  {description} - –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º")
                print(f"      –í—ã–ø–æ–ª–Ω–∏—Ç–µ: chmod +x {script_name}")
        else:
            print(f"   ‚ùå {description} - –ù–ï –Ω–∞–π–¥–µ–Ω")
            all_ok = False
    
    return all_ok

def check_directories():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    required_dirs = [
        "strategies",
        "signals", 
        "logs",
        "user_data"
    ]
    
    for dir_name in required_dirs:
        dir_path = Path(dir_name)
        if dir_path.exists():
            print(f"   ‚úÖ {dir_name}/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"   ‚ö†Ô∏è  {dir_name}/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º...")
            dir_path.mkdir(exist_ok=True)
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –£–°–¢–ê–ù–û–í–ö–ò –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
    print("="*50)
    
    checks = [
        ("Python –≤–µ—Ä—Å–∏—è", check_python_version),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_dependencies),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_config_file),
        ("–°—Ç—Ä–∞—Ç–µ–≥–∏–∏", check_strategy_files),
        ("–ú–æ–¥—É–ª–∏ —Å–∏–≥–Ω–∞–ª–æ–≤", check_signal_modules),
        ("–°–∫—Ä–∏–ø—Ç—ã", check_scripts),
        ("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", check_directories)
    ]
    
    results = []
    
    for check_name, check_func in checks:
        try:
            result = check_func()
            results.append((check_name, result))
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {check_name}: {e}")
            results.append((check_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("\n" + "="*50)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢:")
    
    passed = 0
    total = len(results)
    
    for check_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û"
        print(f"   {check_name}: {status}")
        if result:
            passed += 1
    
    print("\n" + "="*50)
    
    if passed == total:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("   –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É: ./run_futures.sh")
    else:
        print(f"‚ö†Ô∏è  –ü–†–û–ô–î–ï–ù–û {passed}/{total} –ü–†–û–í–ï–†–û–ö")
        print("   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)